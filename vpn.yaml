#
# Copyright 2017 Eonian Technologies.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# CloudFormation template that installs the OpenVPN Access Server in the first
# public subnet of the given VPC. The VPCs NACL rules will be updated to allow
# connectivity. Additional charges for use of the OpenVPN software may apply.
#
AWSTemplateFormatVersion: '2010-09-09'
Description: OpenVPN Access Server.

# Parameters
Parameters:
  VPCStackName:
    Type: String
    Description: The name of the VPC stack where the VPN will be deployed.
  Version:
    Type: String
    Description: The OpenVPN version.
    AllowedValues:
    - '2.1.9'
    Default: '2.1.9'
  NumberOfDevices:
    Type: String
    Description: Does not include instance charges. You must accept the license agreement in the AWS Marketplace.
    AllowedValues:
    -   2 | Free
    -   5 | $0.07/hr or from $490.00/yr
    -  10 | $0.10/hr or from $700.00/yr
    -  25 | $0.20/hr or from $1,400.00/yr
    -  50 | $0.30/hr or from $2,100.00/yr
    - 100 | $0.40/hr or from $2,800.00/yr
    - 250 | $0.80/hr or from $5,600.00/yr
    - 500 | $1.50/hr or from $10,500.00/yr
    Default: 2 | Free
  InstanceType:
    Type: String
    Description: The AWS instance type that will be used.
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - t2.xlarge
    - t2.2xlarge
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    Default: t2.medium
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The key that will be used to SSH into the OpenVPN Access Server instance.
  HostName:
    Type: String
    Description: The DNS host name of the VPN server.
    Default: vpn.corp.us-east-1
  DomainName:
    Type: String
    Description: The domain name of the Route53 public hosted zone that will contain the DNS record.
    Default: mycompany.com
  SSHCIDR:
    Type: String
    Description: The IPv4 CIDR allowed to SSH into the VPN instance. NACL rule will be added.
    Default: 0.0.0.0/0

# Metadata
Metadata:
  AWS::CloudFormation::Interface:

    # Parameter Groups
    ParameterGroups:
    - Label:
        default: VPC
      Parameters:
      - VPCStackName
    - Label:
        default: Instance
      Parameters:
      - InstanceType
      - KeyName
    - Label:
        default: OpenVPN
      Parameters:
      - Version
      - NumberOfDevices
    - Label:
        default: DNS
      Parameters:
      - HostName
      - DomainName
    - Label:
        default: Public SSH Ingress
      Parameters:
      - SSHCIDR

    # Parameter Labels
    ParameterLabels:
      VPCStackName:
        default: VPC Stack
      InstanceType:
        default: Instance Type
      HostName:
        default: Host Name
      DomainName:
        default: Domain Name
      SSHCIDR:
        default: IPv4 CIDR
      NumberOfDevices:
        default: Number Of Users

# Resources
Resources:

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref 'AWS::StackName'
      GroupDescription: !Ref 'AWS::StackName'
      VpcId:
        Fn::ImportValue:
          Fn::Sub:
            ${VPCStackName}:vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHCIDR
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '943'
        ToPort: '943'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '1194'
        ToPort: '1194'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'

  # Instance
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub "${OpenVPNAMI.value}"
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref SecurityGroup
      SubnetId:
        Fn::ImportValue:
          Fn::Sub:
             ${VPCStackName}:public-subnet-1
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'

  # EIP
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Associate EIP
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP:
        Ref: EIP
      InstanceId:
        Ref: Instance

  # DNS Record
  Route53RecordSet:
    Type: "AWS::Route53::RecordSet"
    DependsOn: Instance
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      Name: !Sub "${HostName}.${DomainName}."
      Type: A
      TTL: '300'
      ResourceRecords:
      - Ref: EIP

  # Inbound SSH
  PublicAclIngress500:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: Instance
    Properties:
      CidrBlock: !Ref SSHCIDR
      Protocol: "6"
      RuleAction: allow
      RuleNumber: '500'
      PortRange:
        From: '22'
        To: '22'
      NetworkAclId:
        Fn::ImportValue:
          Fn::Sub:
            ${VPCStackName}:public-nacl

  # Inbound VPN UI
  PublicAclIngress510:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: Instance
    Properties:
      CidrBlock: !Ref SSHCIDR
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '510'
      PortRange:
        From: '943'
        To: '943'
      NetworkAclId:
        Fn::ImportValue:
          Fn::Sub:
            ${VPCStackName}:public-nacl

  # Inbound VPN UDP
  PublicAclIngress520:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: Instance
    Properties:
      CidrBlock: !Ref SSHCIDR
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '520'
      PortRange:
        From: '1194'
        To: '1194'
      NetworkAclId:
        Fn::ImportValue:
          Fn::Sub:
            ${VPCStackName}:public-nacl

  # Lambda Function to Look up the OpenVPN Marketplace AMI based on the region,
  # the OpenVPN version, and the number of connected devices.
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      Runtime: python2.7
      Handler: "index.handler"
      Timeout: 5
      FunctionName: !Sub get-openvpc-marketplace-ami-${AWS::StackName}
      Description: Looks up the OpenVPN Marketplace AMI based on the region and the desired number of connected devices.
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import cfnresponse
          def handler(event, context):
            # handle delete event
            if event['RequestType'] is 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS)
            # Set the 'event' properties to local variables.
            Region = event['ResourceProperties']['Region']
            Version = event['ResourceProperties']['Version']
            NumberOfDevices = event['ResourceProperties']['NumberOfDevices']
            NumberOfDevices = NumberOfDevices.split(" | ")[0]
            # Create the AMI map
            amiMap = {}
            amiMap["us-east-1"] = {}
            amiMap["us-east-1"]["2.1.9"] = {}
            amiMap["us-east-1"]["2.1.9"]["2"] = "ami-f6eed4e0"
            amiMap["us-east-1"]["2.1.9"]["5"] = "ami-6beed47d"
            amiMap["us-east-1"]["2.1.9"]["10"] = "ami-d4e9d3c2"
            amiMap["us-east-1"]["2.1.9"]["25"] = "ami-f1eed4e7"
            amiMap["us-east-1"]["2.1.9"]["50"] = "ami-bcebd1aa"
            amiMap["us-east-1"]["2.1.9"]["100"] = "ami-29eed43f"
            amiMap["us-east-1"]["2.1.9"]["250"] = "ami-b1ebd1a7"
            amiMap["us-east-1"]["2.1.9"]["500"] = "ami-2deed43b"
            # Create the response data map
            responseData = {}
            responseData['value'] = amiMap[Region][Version][NumberOfDevices]
            # Send the response
            cfnresponse.send(
                    event,
                    context,
                    cfnresponse.SUCCESS,
                    responseData,
                    "CustomResourcePhysicalID")
      Runtime: python2.7
      Timeout: 5

  # IAM Role for the Lambda Function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AllowLogsWrite
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  # Execute the Lambda Function
  OpenVPNAMI:
    DependsOn: LambdaRole
    Type: Custom::ExecuteLambda
    DependsOn: LambdaFunction
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      Region: !Ref 'AWS::Region'
      Version: !Ref Version
      NumberOfDevices: !Ref NumberOfDevices

# Outputs
Outputs:
  AMI:
    Description: The OpenVPN AMI used.
    Value: !Sub "${OpenVPNAMI.value}"
  AdminURL:
    Description: The URL to the OpenVPN Admin UI.
    Value: !Sub "https://${HostName}.${DomainName}:943/admin"
  DomainName:
    Description: The domain name of the OpenVPN instsance.
    Value: !Sub "${HostName}.${DomainName}"
  IPAddress:
    Description: The IP address of the OpenVPN instance.
    Value: !Ref EIP
